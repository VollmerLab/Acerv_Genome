unlist %>%
str_trim() %>%
str_subset('N', negate = TRUE) %>%
as.numeric() %>%
magrittr::multiply_by(c(1, 1/60)) %>%
sum,
y_coord = str_split(y_coord, "Â°|\\'") %>%
unlist %>%
str_trim() %>%
str_subset('W', negate = TRUE) %>%
as.numeric() %>%
magrittr::multiply_by(c(1, 1/60)) %>%
sum %>%
magrittr::multiply_by(-1)) %>%
ungroup %>%
st_as_sf(coords = c('y_coord', 'x_coord')) %>%
st_set_crs('WGS84') %>%
mutate(gen_id = str_c(origin, genotype_name, sep = '_')) %>%
rename(sample_name = gl_crf_ind_names) %>%
select(sample_name, gen_id)
vcf_data <- left_join(as_tibble(snp_data),
as_tibble(mote_genos) %>% select(-geometry),
by = c('sample_name', 'genotype')) %>%
left_join(as_tibble(crf_genos) %>% select(-geometry),
by = 'sample_name') %>%
mutate(gen_id = coalesce(gen_id.x, gen_id.y),
.keep = 'unused') %>%
mutate(gen_id = if_else(is.na(gen_id) & str_detect(sample_name, 'MOTE', negate = TRUE),
str_c('CRF', genotype, sep = '_'), gen_id),
gen_id = if_else(is.na(gen_id), str_c(nursary, genotype, sep = '_'), gen_id),
gen_id = if_else(sample_name == 'AC-MOTE_35', 'MOTE_69', gen_id),
reef = str_c(subregion, reef_name, sep = '-')) %>%
filter(!is.na(gen_id)) %>%
select(sample_name, nursary, reef, gen_id, geometry) %>%
st_as_sf() %>%
bind_cols(st_coordinates(.)) %>%
as_tibble() %>%
select(-geometry) %>%
rename(lon = X,
lat = Y,
rad_sampleName = sample_name,
rad_ID = gen_id) %>%
select(rad_ID, lon, lat, reef, rad_sampleName)
#New CRF Samples Survival
new_crf_survival <- read_excel('../Survivorship/github/Data//NOAA 2016-2019 Level 2 Monitoring Data_for Steve.xlsx',
col_types = c(rep('skip', 4), 'date', 'numeric', 'date',
'text', 'skip', rep('numeric', 2), 'skip',
rep('text', 2), 'skip', rep('text', 3),
rep('numeric', 2), rep('skip', 3), rep('text', 5),
rep('skip', 4), 'text', 'numeric', rep('skip', 6)),
na = c("NA", 'Not recorded', '')) %>%
mutate(across(contains('Date'), as_date)) %>%
rename_with(~str_remove_all(., '\\r\\n.*') %>% str_trim) %>%
rename_with(~str_remove(., "# Corals ")) %>%
rename_with(~str_remove(., " \\(1-5\\)")) %>%
clean_names() %>%
filter(species == "A. cervicornis") %>%
select(-species) %>%
rename(census_date = monitoring_date) %>%
filter(outplant_date < census_date) %>%
select(-cluster_number, -cow_tag, -coral_letter) %>%
mutate(gen_id = str_c('CRF_', genotype), .keep = 'unused', .before = everything()) %>%
select(gen_id, outplant_date, census_date, number_outplanted_corals, alive, dead, latitude, longitude, bleaching, disease) %>%
mutate(n_weeks = interval(outplant_date, census_date) %/% weeks(1)) %>%
group_by(gen_id) %>%
summarise(crf_corals = sum(alive, na.rm = TRUE) + sum(dead, na.rm = TRUE),
crf_pctSurvival = sum(alive, na.rm = TRUE) / crf_corals,
crf_minWeeks = min(n_weeks),
crf_maxWeeks = max(n_weeks),
.groups = 'drop') %>%
mutate(gen_id = str_remove(gen_id, '^CRF_'))
#Join it all together
full_data <- full_join(disease_resistance,
wgs_samples,
by = c('genotype', 'location')) %>%
full_join(clone_data, by = 'genotype') %>%
full_join(mrna, by = 'genotype') %>%
full_join(select(mirna, -resistance), by = 'genotype') %>%
rename(diseaseResistance_categorical = resistance) %>%
full_join(microbes, by = 'genotype') %>%
mutate(location = if_else(is.na(location), 'Florida', location)) %>%
full_join(final_disease, by = 'genotype') %>%
full_join(translation_table, by = 'genotype') %>%
full_join(thermal_data, by = 'cunning_ID') %>%
full_join(vcf_data, by = 'rad_ID') %>%
mutate(lat = coalesce(lat.x, lat.y),
lon = coalesce(lon.x, lon.y),
reef = coalesce(reef.x, reef.y),
.keep = 'unused') %>%
full_join(survival_data, by = 'vanWoesik_ID') %>%
full_join(new_crf_survival, by = c('genotype' = 'gen_id')) %>%
mutate(location = if_else(is.na(location), 'Florida', location)) %>%
arrange(location, genotype) %>%
select(location, reef, lat, lon, starts_with('specimen'),
genotype, clone_group, starts_with('diseaseResistance'),
starts_with('fds'), starts_with('wgs'), starts_with('mRNA'),
starts_with('miRNA'), starts_with('16s'), starts_with('rad'),
starts_with('thermal'), starts_with('vanWoesik'), starts_with('crf'),
ends_with('_ID')) %>%
relocate('vanWoesik_ID', 'vollmer_ID', .after = everything())
write_csv(full_data, './sampling_designs/acropora_master_data.csv')
#### Just RNA ####
full_data %>%
select(genotype, clone_group, starts_with('diseaseResistance'),
contains('specimen'), contains('fds'), contains('RNA_'), contains('16s')) %>%
filter(!if_all(c(where(is.numeric), -contains('specimen')), is.na)) %>%
rowwise() %>%
mutate(have_rna = any(!is.na(c_across(contains('RNA_'))))) %>%
ungroup %>%
relocate(have_rna, .before = genotype) %>%
arrange(-have_rna, genotype) %>%
write_csv('./sampling_designs/rna_experiments.csv')
full_data %>%
select(genotype, clone_group, contains('fds'), contains('16s')) %>%
filter(!if_all(c(where(is.numeric), -contains('specimen')), is.na))
#### Genomic Data ####
full_data %>%
select(genotype, clone_group, contains('specimen'), diseaseResistance_D,
starts_with('wgs'), starts_with('rad'), starts_with('thermal'),
starts_with('vanWoesik'), starts_with('crf'), cunning_ID) %>%
filter(!is.na(specimen_boxID) | !is.na(wgs_reads) | !is.na(rad_ID)) %>%
filter(!is.na(thermal_tolerance) | !is.na(vanWoesik_pctSurvival)) %>%
relocate(cunning_ID, .after = 'thermal_tolerance') %>%
write_csv('./sampling_designs/dna_experiments.csv')
#### Random Plots ####
full_data %>%
select(genotype, starts_with('diseaseResistance')) %>%
filter(!is.na(diseaseResistance_categorical)) %>%
ggplot(aes(x = diseaseResistance_categorical, y = diseaseResistance_D)) +
geom_boxplot() +
stat_summary(fun.data = 'mean_se')
full_data %>%
select(genotype, starts_with('diseaseResistance'), starts_with('FDS')) %>%
filter(!is.na(diseaseResistance_categorical)) %>%
select(-contains('H')) %>%
rowwise %>%
mutate(pct_disease = mean(c_across(starts_with('fds')) == 'D')) %>%
ggplot(aes(x = diseaseResistance_categorical, y = pct_disease)) +
geom_boxplot()
full_data %>%
select(genotype, starts_with('diseaseResistance'), starts_with('FDS')) %>%
filter(!is.na(diseaseResistance_categorical)) %>%
select(-contains('H')) %>%
rowwise %>%
mutate(pct_disease = mean(c_across(starts_with('fds')) == 'D')) %>%
ggplot(aes(x = diseaseResistance_D, y = pct_disease)) +
geom_jitter()
#### Random Plots ####
full_data %>%
select(genotype, starts_with('diseaseResistance')) %>%
filter(!is.na(diseaseResistance_categorical)) %>%
ggplot(aes(x = diseaseResistance_categorical, y = diseaseResistance_D)) +
geom_boxplot() +
stat_summary(fun.data = 'mean_se')
full_data %>%
select(genotype, starts_with('diseaseResistance'), starts_with('FDS')) %>%
filter(!is.na(diseaseResistance_categorical)) %>%
select(-contains('H')) %>%
rowwise %>%
mutate(pct_disease = mean(c_across(starts_with('fds')) == 'D')) %>%
ggplot(aes(x = diseaseResistance_categorical, y = pct_disease)) +
geom_boxplot()
full_data %>%
select(genotype, starts_with('diseaseResistance'), starts_with('FDS')) %>%
filter(!is.na(diseaseResistance_categorical)) %>%
select(-contains('H')) %>%
rowwise %>%
mutate(pct_disease = mean(c_across(starts_with('fds')) == 'D')) %>%
ggplot(aes(x = diseaseResistance_D, y = pct_disease)) +
geom_jitter()
preprocess_metadata
preprocess_metadata
filter(preprocess_metadata,
!is.na(total_reads))
filter(preprocess_metadata,
!is.na(total_reads)) %>%
filter(mapped_reads > 5e6)
vobjDream <- voomWithDreamWeights(counts = gene_normalize_factors,
formula = ~ time * treatment *
diseaseResistance_categorical +
(1 | fragment_id),
data = filter(preprocess_metadata,
!is.na(total_reads)) %>%
filter(mapped_reads > 5e6) %>%
arrange(sequence_id) %>%
column_to_rownames('sequence_id'),
BPPARAM = param,
plot = TRUE)
#### VOOM Plot & Get Weights Matrix ####
# estimate weights using linear mixed model of dream
param <- SnowParam(parallel::detectCores() - 1, "SOCK", progressbar = TRUE)
vobjDream <- voomWithDreamWeights(counts = gene_normalize_factors,
formula = ~ time * treatment *
diseaseResistance_categorical +
(1 | fragment_id),
data = filter(preprocess_metadata,
!is.na(total_reads)) %>%
filter(mapped_reads > 5e6) %>%
arrange(sequence_id) %>%
column_to_rownames('sequence_id'),
BPPARAM = param,
plot = TRUE)
plot_pcoa <- function(cpm_counts){
filtered_pcoa <- t(cpm_counts) %>%
vegan::vegdist(method = 'euclidean') %>%
divide_by(1000) %>%
ape::pcoa()
percent_variance <- filtered_pcoa$values$Eigenvalues / sum(filtered_pcoa$values$Eigenvalue)
filtered_pcoa$vectors %>%
as_tibble(rownames = 'sequence_id') %>%
dplyr::select(sequence_id, Axis.1, Axis.2) %>%
inner_join(preprocess_metadata,
by = 'sequence_id') %>%
mutate(treat_outcome = str_c(treatment, diseaseResistance_categorical)) %>%
ggplot(aes(x = Axis.1, y = Axis.2, colour = treat_outcome,
# colour = total_reads,
shape = time, group = fragment_id)) +
geom_point() +
geom_path() +
geom_text(aes(label = fragment_id)) +
labs(x = str_c('PCoA 1 (', scales::percent(percent_variance[1]), ')'),
y = str_c('PCoA 2 (', scales::percent(percent_variance[2]), ')')) +
theme_classic()
}
cpm(gene_normalize_factors, log = TRUE, prior.count = 2) %>% plot_pcoa()
gene_normalize_factors %>%
cpm(log = TRUE, prior.count = 0.5,
normalized.lib.sizes = TRUE) %>%
as_tibble(rownames = 'gene_id')
gene_normalize_factors %>%
cpm(log = TRUE, prior.count = 0.5,
normalized.lib.sizes = TRUE) %>%
as_tibble(rownames = 'gene_id') %>%
pivot_longer(cols = -gene_id,
names_to = 'sequence_id',
values_to = 'log2_cpm')
gene_normalize_factors %>%
cpm(log = TRUE, prior.count = 0.5,
normalized.lib.sizes = TRUE) %>%
as_tibble(rownames = 'gene_id') %>%
pivot_longer(cols = -gene_id,
names_to = 'sequence_id',
values_to = 'log2_cpm') %>%
left_join(vobjDream$weights %>%
set_colnames(colnames(vobjDream$E)) %>%
set_rownames(rownames(vobjDream$E)) %>%
as_tibble(rownames = 'gene_id') %>%
pivot_longer(cols = -gene_id,
names_to = 'sequence_id',
values_to = 'weight'),
by = c('gene_id', 'sequence_id'))
#### Merge Data ####
full_data <- gene_normalize_factors %>%
cpm(log = TRUE, prior.count = 0.5,
normalized.lib.sizes = TRUE) %>%
as_tibble(rownames = 'gene_id') %>%
pivot_longer(cols = -gene_id,
names_to = 'sequence_id',
values_to = 'log2_cpm') %>%
left_join(vobjDream$weights %>%
set_colnames(colnames(vobjDream$E)) %>%
set_rownames(rownames(vobjDream$E)) %>%
as_tibble(rownames = 'gene_id') %>%
pivot_longer(cols = -gene_id,
names_to = 'sequence_id',
values_to = 'weight'),
by = c('gene_id', 'sequence_id')) %>%
left_join(preprocess_metadata,
by = 'sequence_id') %>%
left_join(gene_annotations,
by = c('gene_id'))
full_data %>%
select(sequence_id, mapped_reads) %>%
distinct %>%
# filter(total_reads > 5000000) %>%
ggplot(aes(x = mapped_reads)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = 5000000)
full_data
full_data %>%
select(sequence_id, fragment_id, any_of(colnames(preprocess_metadata)),
diseaseResistance_categorical, total_reads, mapped_reads,
gene_id, log2_cpm, weight, attributes, starts_with('kegg'))
full_data %>%
select(sequence_id, fragment_id, any_of(colnames(preprocess_metadata)),
total_reads, mapped_reads, gene_id, log2_cpm, weight,
attributes, starts_with('kegg'))
#### Output data for analysis - first remove unmapped transcripts ####
full_data %>%
select(sequence_id, fragment_id, any_of(colnames(preprocess_metadata)),
total_reads, mapped_reads, gene_id, log2_cpm, weight,
attributes, starts_with('kegg')) %>%
write_csv('../intermediate_files/normalized_transcript_counts.csv.gz')
setwd("~/Google Drive/Research/Vollmer Lab PostDoc/Gene_Expression/Code")
#### Output data for analysis - first remove unmapped transcripts ####
full_data %>%
select(sequence_id, fragment_id, any_of(colnames(preprocess_metadata)),
total_reads, mapped_reads, gene_id, log2_cpm, weight,
attributes, starts_with('kegg')) %>%
write_csv('../intermediate_files/normalized_transcript_counts.csv.gz')
#### Simple Exploratory Plots ####
full_data %>%
filter(!is.na(chromosome)) %>%
nest(data = -gene_id) %>%
sample_n(25) %>%
unnest(data) %>%
ggplot(aes(x = time, y = log2_cpm, colour = treat_outcome)) +
stat_summary(fun.data = mean_se, position = position_dodge(0.5)) +
facet_wrap(~ gene_id)
full_data
#### Simple Exploratory Plots ####
full_data %>%
nest(data = -gene_id) %>%
sample_n(25) %>%
unnest(data) %>%
ggplot(aes(x = time, y = log2_cpm, colour = treat_outcome)) +
stat_summary(fun.data = mean_se, position = position_dodge(0.5)) +
facet_wrap(~ gene_id)
full_data %>%
nest(data = -gene_id) %>%
sample_n(25) %>%
unnest(data)
#### Simple Exploratory Plots ####
full_data %>%
mutate(treat_outcome = str_c(treatment, diseaseResistance_categorical)) %>%
nest(data = -gene_id) %>%
sample_n(25) %>%
unnest(data) %>%
ggplot(aes(x = time, y = log2_cpm, colour = treat_outcome)) +
stat_summary(fun.data = mean_se, position = position_dodge(0.5)) +
facet_wrap(~ gene_id)
#### Libraries ####
library(tidyverse)
library(magrittr)
library(afex)
library(multidplyr)
library(ggupset)
library(qvalue)
library(patchwork)
cluster <- new_cluster(parallel::detectCores() - 1)
cluster_library(cluster, c('dplyr', 'afex'))
cluster_copy(cluster, c('clean_afex'))
#### Data ####
normalized_transcripts <- read_csv('../intermediate_files/normalized_transcript_counts.csv.gz', show_col_types = FALSE)
normalized_transcripts
#### Mixed Model Analysis ####
gene_models <- normalized_transcripts %>%
nest_by(across(c('gene_id', 'attributes', starts_with('kegg')))) %>%
rowwise %>%
ungroup %>%
# sample_n(5) %>% #for testing
rowwise %>%
partition(cluster) %>%
mutate(model = list(mixed(log2_cpm ~ time * treatment *
diseaseResistance_categorical +
(1 | fragment_id),
weights = data$weight,
data = data,
method = 'KR',
REML = TRUE,
control = variancePartition:::vpcontrol))) %>%
collect() %>%
ungroup
gene_models
#### Functions ####
model <- gene_models$model[[1]]
model$anova_table
model$anova_table %>%
as_tibble(rownames = 'param')
model$anova_table %>%
as_tibble(rownames = 'param') %>%
janitor::clean_names() %>%
rename_with(~str_replace_all(., '_df', 'DF'))
model$anova_table %>%
as_tibble(rownames = 'param') %>%
janitor::clean_names() %>%
rename_with(~str_replace_all(., '_df', 'DF')) %>%
rename(pvalue = pr_f) %>%
mutate(param = str_replace(param, ':', 'X'),
param = str_replace(param, 'final_disease_state', 'finalDisease'))
model$anova_table %>%
as_tibble(rownames = 'param') %>%
janitor::clean_names() %>%
rename_with(~str_replace_all(., '_df', 'DF')) %>%
rename(pvalue = pr_f) %>%
mutate(param = str_replace(param, ':', 'X'),
param = str_replace(param, 'diseaseResistance_categorical', 'susceptability'))
model$anova_table %>%
as_tibble(rownames = 'param') %>%
janitor::clean_names() %>%
rename_with(~str_replace_all(., '_df', 'DF')) %>%
rename(pvalue = pr_f) %>%
mutate(param = str_replace(param, ':', 'X'),
param = str_replace(param, 'diseaseResistance_categorical', 'susceptability')) %>%
pivot_wider(names_from = 'param',
values_from = where(is.numeric),
names_vary = 'slowest')
clean_afex <- function(model){
model$anova_table %>%
as_tibble(rownames = 'param') %>%
janitor::clean_names() %>%
rename_with(~str_replace_all(., '_df', 'DF')) %>%
rename(pvalue = pr_f) %>%
mutate(param = str_replace(param, ':', 'X'),
param = str_replace(param, 'diseaseResistance_categorical', 'susceptability')) %>%
pivot_wider(names_from = 'param',
values_from = where(is.numeric),
names_vary = 'slowest')
}
cluster_copy(cluster, c('clean_afex'))
gene_models_outcome <- gene_models %>%
# slice(1:7) %>%
rowwise('gene_id', 'attributes', starts_with('kegg')) %>%
# partition(cluster) %>%
summarise(clean_afex(model)) %>%
# collect %>%
ungroup %>%
mutate(across(starts_with('pvalue'), p.adjust, method = 'fdr',
.names = 'fdr_{.col}')) %>%
rename_with(~str_replace_all(., 'fdr_pvalue', 'fdr')) %>%
mutate(across(starts_with('pvalue'), ~qvalue(.)$qvalues,
.names = 'qvalue_{.col}')) %>%
rename_with(~str_replace_all(., 'qvalue_pvalue', 'qvalue')) %>%
select(gene_id, attributes, starts_with('kegg'),
ends_with('time'), ends_with('_treatment'), ends_with('_finalDisease'),
ends_with('timeXtreatment'), ends_with('timeXfinalDisease'))
select(gene_models_outcome, gene_id, starts_with('fdr')) %>%
mutate(across(where(is.numeric),
~. < 0.05)) %>%
filter(fdr_timeXtreatment)
select(gene_models_outcome, gene_id, starts_with('qvalue')) %>%
mutate(across(where(is.numeric),
~. < 0.05)) %>%
filter(qvalue_timeXtreatment)
qvalue_upset <- select(gene_models_outcome, gene_id, starts_with('qvalue')) %>%
mutate(across(where(is.numeric),
~. < 0.05)) %>%
rename_with(~str_remove(., 'qvalue_')) %>%
pivot_longer(cols = -gene_id,
names_to = c('term'),
values_to = 'significance') %>%
filter(significance) %>%
group_by(gene_id) %>%
summarise(terms = list(term),
.groups = 'drop') %>%
ggplot(aes(x = terms)) +
geom_bar() +
scale_x_upset() +
theme_classic() +
theme_combmatrix(combmatrix.label.make_space = TRUE) +
labs(title = 'QValue')
qvalue_upset
gene_models_outcome
gene_models_outcome
colnames(gene_models_outcome)
clean_afex(gene_models$model[[1]])
clean_afex(gene_models$model[[1]]) %>% colnames
gene_models_outcome <- gene_models %>%
# slice(1:7) %>%
rowwise('gene_id', 'attributes', starts_with('kegg')) %>%
# partition(cluster) %>%
summarise(clean_afex(model)) %>%
# collect %>%
ungroup %>%
mutate(across(starts_with('pvalue'), p.adjust, method = 'fdr',
.names = 'fdr_{.col}')) %>%
rename_with(~str_replace_all(., 'fdr_pvalue', 'fdr')) %>%
mutate(across(starts_with('pvalue'), ~qvalue(.)$qvalues,
.names = 'qvalue_{.col}')) %>%
rename_with(~str_replace_all(., 'qvalue_pvalue', 'qvalue'))# %>%
qvalue_upset <- select(gene_models_outcome, gene_id, starts_with('qvalue')) %>%
mutate(across(where(is.numeric),
~. < 0.05)) %>%
rename_with(~str_remove(., 'qvalue_')) %>%
pivot_longer(cols = -gene_id,
names_to = c('term'),
values_to = 'significance') %>%
filter(significance) %>%
group_by(gene_id) %>%
summarise(terms = list(term),
.groups = 'drop') %>%
ggplot(aes(x = terms)) +
geom_bar() +
scale_x_upset() +
theme_classic() +
theme_combmatrix(combmatrix.label.make_space = TRUE) +
labs(title = 'QValue')
qvalue_upset
setwd("~/Google Drive/Research/Vollmer Lab PostDoc/Comparative_Genomics/Code")
#### Libraries ####
library(tidyverse)
library(magrittr)
library(treedataverse)
library(deeptime)
library(gt)
library(multidplyr)
cluster <- new_cluster(parallel::detectCores() - 1)
cluster_library(cluster, c('ape', 'tidytree', 'tibble', 'dplyr', 'stringr'))
#### KEGG Pathway data ####
paths_particular_interest <- c('map04620', 'map04624', 'map00260', 'map00270', 'map01100', 'map01110', 'map01230', 'map01120')
kegg_paths <- read_csv('../intermediate_files/kegg_orthogroup_pathways.csv.gz',
show_col_types = FALSE) %>%
filter(major_category != 'Human Diseases') %>%
select(kegg_path_id, name, description, minor_category, major_category, pathway_map, rel_pathway) %>%
distinct %>%
mutate(kegg_path_id = str_remove(kegg_path_id, 'path:'))
kegg_paths
kegg_paths <- read_csv('../intermediate_files/kegg_orthogroup_pathways.csv.gz',
show_col_types = FALSE) %>%
filter(major_category != 'Human Diseases')
kegg_paths
View(kegg_paths)
