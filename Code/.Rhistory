mutate(no_genome = c(caribbean_total, indopacific_total),
no_genome = no_genome - n) %>%
column_to_rownames('closer')
coral_classification %>%
group_by(closer) %>%
summarise(n = n_distinct(species)) %>%
mutate(no_genome = c(caribbean_total, indopacific_total),
no_genome = no_genome - n) %>%
column_to_rownames('closer') %>%
fisher.test()
#### Are Caribbean Corals underrepresented in genomes ####
coral_classification %>%
group_by(closer) %>%
summarise(n = n_distinct(species)) %>%
pivot_wider(names_from = closer,
values_from = n) %>%
mutate(total = carib + indo) %$%
prop.test(x = carib, n = total, p = caribbean_total / (caribbean_total + indopacific_total))
coral_classification %>%
group_by(closer) %>%
summarise(n = n_distinct(species)) %>%
pivot_wider(names_from = closer,
values_from = n) %>%
mutate(total = carib + indo)
caribbean_total
indopacific_total
prop.test(x = c(2, 73), n = c(34, 758))
coral_classification
#### Are Caribbean Corals underrepresented in genomes ####
coral_classification %>%
filter(species != 'Acropora palmata') %>%
group_by(closer) %>%
summarise(n = n_distinct(species)) %>%
pivot_wider(names_from = closer,
values_from = n) %>%
mutate(total = carib + indo) %$%
prop.test(x = carib, n = total, p = caribbean_total / (caribbean_total + indopacific_total))
coral_classification %>%
filter(species != 'Acropora palmata') %>%
group_by(closer) %>%
summarise(n = n_distinct(species)) %>%
pivot_wider(names_from = closer,
values_from = n) %>%
mutate(total = carib + indo)
#### Are Caribbean Corals underrepresented in genomes ####
coral_classification %>%
# filter(species != 'Acropora palmata') %>%
group_by(closer) %>%
summarise(n = n_distinct(species)) %>%
pivot_wider(names_from = closer,
values_from = n) %>%
mutate(total = carib + indo) %$%
prop.test(x = carib, n = total, p = caribbean_total / (caribbean_total + indopacific_total))
library(msa)
library(ape)
library(phangorn)
?msa
?upgma
?dist.ml
phyDat
sample(27, 5)
sample(27, 1)
sample(27, 2)
sample(27, 2)
library(KEGGREST)
keggGet('XP_044174648.1')
?keggConv
keggConv(target = ('XP_044174648.1', source = "ncbi-proteinid")
keggConv(target = 'XP_044174648.1', source = "ncbi-proteinid")
keggConv("ncbi-proteinid", c('XP_044174648.1'))
keggConv("ncbi-proteinid", c('K07521'))
head(keggConv("eco", "ncbi-geneid"))
keggList("organism")
organisms <- keggList("organism")
dim(organisms)
as_tibble(organisms)
library(tidyverse)
as_tibble(organisms)
as_tibble(organisms) %>%
separate(phylogeny, sep = ';', into = LETTERS[1:10])
as_tibble(organisms) %>%
separate(phylogeny, sep = ';', into = LETTERS[1:4])
as_tibble(organisms) %>%
separate(phylogeny, sep = ';', into = LETTERS[1:4])
as_tibble(organisms) %>%
slice(331)
as_tibble(organisms) %>%
filter(!str_detect(phylogeny, 'Animals'))
as_tibble(organisms) %>%
filter(!str_detect(phylogeny, 'Animals|Plants'))
as_tibble(organisms) %>%
filter(!str_detect(phylogeny, 'Animals|Plants|Fungi'))
as_tibble(organisms) %>%
filter(!str_detect(phylogeny, 'Animals|Plants|Fungi|Protists'))
as_tibble(organisms) %>%
filter(!str_detect(phylogeny, 'Animals|Plants|Fungi|Protists|Bacteria'))
as_tibble(organisms) %>%
filter(!str_detect(phylogeny, 'Animals|Plants|Fungi|Protists|Bacteria|Archaea'))
as_tibble(organisms) %>%
filter(str_detect(phylogeny, 'Animals'))
as_tibble(organisms) %>%
filter(str_detect(phylogeny, 'Animals')) %>%
filter(!str_detect(phylogeny, 'Vertebrates'))
as_tibble(organisms) %>%
filter(str_detect(phylogeny, 'Animals')) %>%
filter(!str_detect(phylogeny, 'Vertebrates|Arthropods|Tunicates|Echinoderms|Cephalochordates'))
as_tibble(organisms) %>%
filter(str_detect(phylogeny, 'Animals')) %>%
filter(!str_detect(phylogeny, 'Vertebrates|Arthropods|Tunicates|Echinoderms|Cephalochordates|Hemichordates|Nematodes|Annelids|Mollusks'))
as_tibble(organisms) %>%
filter(str_detect(phylogeny, 'Animals')) %>%
filter(str_detect(phylogeny, 'Cnidarians'))
nemato_proteins <- keggConv("nve", "ncbi-geneid")
nemato_proteins
nemato_proteins <- keggConv("nve", "ncbi-proteinid")
nemato_proteins
enframe(nemato_proteins)
enframe(nemato_proteins, name = 'protein_id', value = 'kegg_id')
organisms %>%
as_tibble() %>%
filter(str_detect(phylogeny, 'Animals')) %>%
filter(str_detect(phylogeny, 'Cnidarians'))
organisms %>%
as_tibble() %>%
filter(str_detect(phylogeny, 'Animals')) %>%
filter(str_detect(phylogeny, 'Cnidarians')) %>%
rowwise(everything())
all_cnidarian_keggs <- organisms %>%
as_tibble() %>%
filter(str_detect(phylogeny, 'Animals')) %>%
filter(str_detect(phylogeny, 'Cnidarians')) %>%
rowwise(everything()) %>%
summarise(keggConv(organism, "ncbi-proteinid"))
all_cnidarian_keggs
ko <- keggList('ko')
ko
ko[1]
ko[24738]
?keggList
all_cnidarian_keggs
ko <- keggList('ko', 'nve')
ko <- keggList('ko', 'nve')
keggConv('nve', "ko")
keggConv("ko", 'nve')
all_cnidarian_keggs
keggList(c("nve:116601119"))
org <- keggList("organism")
queryables <- c(listDatabases(), org[,1], org[,2])
queryables
org
org[,1]
org[,2]
listDatabases()
keggConv("kegg", 'nve')
keggConv("pathway", 'nve')
keggLink("nve", "ko")
all_cnidarian_keggs
nemato_proteins <- keggConv("ko", "ncbi-proteinid")
nemato_proteins <- keggConv("ncbi-proteinid", 'ko')
keggLink("nve", "ko")
keggLink('nve', "ko")
keggLink('nve', "ko") %>%
enframe
enframe(keggConv(org, "ncbi-proteinid"),
name = 'ncbi_id',
value = 'kegg_org_id')
org <- 'nve'
A <- enframe(keggConv(org, "ncbi-proteinid"),
name = 'ncbi_id',
value = 'kegg_org_id')
B <- keggLink(org, "ko") %>%
enframe(name = 'kegg_ortho',
value = 'kegg_org_id')
A
B
count(B, kegg_org_id)
count(B, kegg_org_id) %>%
filter(n > 1)
count(A, kegg_org_id) %>%
filter(n > 1)
filter(B, kegg_org_id == 'nve:5502512')
full_join(A, B)
get_org_keggs <- function(org){
A <- enframe(keggConv(org, "ncbi-proteinid"),
name = 'ncbi_id',
value = 'kegg_org_id')
B <- enframe(keggLink(org, "ko"),
name = 'kegg_ortho',
value = 'kegg_org_id')
full_join(A, B,
by = "kegg_org_id")
}
library(KEGGREST)
keggGet(c("hsa:23276", "rno:246757"))
library(tidyverse)
the_table <0 read_csv('C:/Users/jdsel/Dropbox/0_NSF_GWAS/Table_S2.csv.xz')
the_table <- read_csv('C:/Users/jdsel/Dropbox/0_NSF_GWAS/Table_S2.csv.xz')
the_table
the_table
library(LEA)
?snmf
library(tidyverse)
tab1 <- read_csv('C:/Users/jdsel/Dropbox/0_NSF_GWAS/Table_S1.csv.xz')
?bzfile
write_csv(tab1, xzfile('C:/Users/jdsel/Dropbox/0_NSF_GWAS/second_Table_S1.csv.gz', compression = 9))
write_csv(tab1, 'C:/Users/jdsel/Dropbox/0_NSF_GWAS/second_Table_S1.csv')
sample(39,1)
sample(39,3)
sample(40,3)
sample(31,3)
sample(29,3)
if(!interactive()){
args <- commandArgs(trailingOnly = TRUE)
the_file <- args[1]
} else {
the_file <- 'C:/Users/jdsel/Documents/Google Drive/Research/Vollmer Lab PostDoc/Bioinformatics/tmp/rna_sequence_files.txt'
}
the_file
readr::read_lines(the_file)
suppressMessages(suppressWarnings(library(tidyverse)))
read_lines(the_file)
read_lines(the_file) %>%
tibble(file = .)
c(letters, LETTERS)
sample(c(letters, LETTERS, 0:9), 3)
str_c(sample(c(letters, LETTERS, 0:9), 3), collapse = '')
replicate(5, str_c(sample(c(letters, LETTERS, 0:9), 3), collapse = ''))
read_lines(the_file) %>%
tibble(file = .) %>%
mutate(code = replicate(nrow(.), str_c(sample(c(letters, LETTERS, 0:9), 3), collapse = '')))
make_code <- function(n){
replicate(n, str_c(sample(c(letters, LETTERS, 0:9), 3), collapse = ''))
}
read_lines(the_file) %>%
tibble(file = .) %>%
mutate(code = make_code(nrow(.))) %>%
group_by(code)
coded_files <- read_lines(the_file) %>%
tibble(file = .) %>%
mutate(code = make_code(nrow(.)))
coded_files
length(unique(coded_files$code)) == nrow(coded_files)
coded_files$code[2] <- coded_files$code[1]
length(unique(coded_files$code))
nrow(coded_files)
coded_files$code
duplicated( coded_files$code)
coded_files$code[duplicated(coded_files$code)]
coded_files$code %in% coded_files$code[duplicated(coded_files$code)]
coded_files$code[coded_files$code %in% coded_files$code[duplicated(coded_files$code)]]
coded_files$code %in% coded_files$code[duplicated(coded_files$code)]
multiple_codes <- coded_files$code %in% coded_files$code[duplicated(coded_files$code)]
multiple_codes
coded_files$code[multiple_codes]
make_code(sum(multiple_codes))
make_code <- function(n){
replicate(n, str_c(sample(c(letters, LETTERS, 0:9), 3), collapse = ''))
}
coded_files <- read_lines(the_file) %>%
tibble(file = .) %>%
mutate(code = make_code(nrow(.)))
while(length(unique(coded_files$code)) < nrow(coded_files)){
multiple_codes <- coded_files$code %in% coded_files$code[duplicated(coded_files$code)]
coded_files$code[multiple_codes] <- make_code(sum(multiple_codes))
}
coded_files
coded_files
dirname(the_file)
str_c(dirname(the_file), 'config.file', sep = '/')
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler", force = TRUE)
library(clusterProfiler)
data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 2]
kk <- enrichKEGG(gene         = gene,
organism     = 'hsa',
pvalueCutoff = 0.05)
head(kk)
?enrichKEGG
data(geneList, package='DOSE')
de <- names(geneList)[1:100]
yy <- enrichKEGG(de, pvalueCutoff=0.01)
head(yy)
ggo <- groupGO(gene     = gene,
OrgDb    = org.Hs.eg.db,
ont      = "CC",
level    = 3,
readable = TRUE)
?groupGO
data(gcSample)
yy <- groupGO(gcSample[[1]], 'org.Hs.eg.db', ont="BP", level=2)
?gseKEGG
data(geneList, package="DOSE")
kk2 <- gseKEGG(geneList     = geneList,
organism     = 'hsa',
minGSSize    = 120,
pvalueCutoff = 0.05,
verbose      = FALSE)
geneList
kk2 <- gseKEGG(geneList     = geneList,
organism     = 'hsa',
minGSSize    = 120,
pvalueCutoff = 0.05,
verbose      = FALSE)
kk2 <- gseKEGG(geneList     = geneList,
organism     = 'hsa',
minGSSize    = 120,
pvalueCutoff = 0.05,
verbose      = TRUE)
geneList
?geneList
library(fgsea)
data(examplePathways)
data(exampleRanks)
exampleRanks
examplePathways
?examplePathways
fgseaRes <- fgsea(pathways = examplePathways,
stats    = exampleRanks,
minSize  = 15,
maxSize  = 500)
fgseaRes
length(exampleRanks)
dim(exampleRanks)
names(exampleRanks)[1:5]
exampleRanks[1:5]
examplePathways[[1]]
remotes::install_github("gavinsimpson/gratia")
setwd("~/Google Drive/Research/Vollmer Lab PostDoc/Comparative_Genomics/Code")
#### Libraries ####
library(multcomp)
library(KEGGREST)
library(tidyverse)
library(broom)
library(emmeans)
library(patchwork)
library(ggmosaic)
#### Functions ####
get_kegg_path <- function(pathways){
tibble(kegg_api = keggGet(unlist(str_split(pathways, ';;')))) %>%
unnest_wider(kegg_api) %>%
select(contains(c('ENTRY', 'NAME', 'CLASS'))) %>%
mutate(name_length = lengths(NAME)) %>%
rowwise %>%
mutate(NAME = case_when(name_length == 2 ~ list(str_c(unlist(NAME), collapse = ': ')),
name_length == 0 ~ list(NA_character_),
TRUE ~ list(NAME))) %>%
ungroup %>%
select(-name_length) %>%
unnest(NAME) %>%
janitor::clean_names() %>%
separate(class, sep = '; ', into = c('major_category', 'minor_category'))
}
#### Data ####
gff_file <- microseq::readGFF('../../Bioinformatics/genome_annotation/k2_structuralAnnotations.gff3') %>%
filter(Type %in% c('gene', 'mRNA')) %>%
mutate(gene_id = if_else(str_detect(Attributes, 'Parent'),
str_extract(Attributes, 'Parent=Acer_[0-9]+') %>% str_remove('Parent='),
str_extract(Attributes, 'ID=Acer_[0-9]+') %>% str_remove('ID='))) %>%
group_by(gene_id) %>%
filter(n() == 2) %>%
ungroup %>%
select(-Seqid, -Source, -Start, -End, -Score, -Strand, -Phase) %>%
pivot_wider(names_from = Type, values_from = Attributes) %>%
mutate(gene = str_extract(gene, 'Name=.*') %>% str_remove('Name='),
mRNA = str_remove(mRNA, str_c('ID=.*', gene_id)) %>% str_remove('^;'))
species_stats <- read_delim('../../Bioinformatics/Phylogenomics/Comparative_Genomics_Statistics/Statistics_PerSpecies.tsv',
delim = '\t', n_max = 10) %>%
rename(param = 1) %>%
pivot_longer(cols = -param,
names_to = 'species') %>%
pivot_wider(names_from = param, values_from = value)
species_stats %>%
filter(species == 'acer') %>%
select(-species) %>%
pivot_longer(cols = everything())
kegg_annotations <- read_csv('../../Bioinformatics/Phylogenomics/Annotations/kegg_annotations.csv.gz',
show_col_types = FALSE)
all_orthogroups <- read_delim('../../Bioinformatics/Phylogenomics/Phylogenetic_Hierarchical_Orthogroups/N0.tsv', show_col_types = FALSE) %>%
dplyr::select(-OG, -`Gene Tree Parent Clade`) %>%
dplyr::rename(Orthogroup = HOG) %>%
pivot_longer(cols = -Orthogroup,
names_to = 'species',
values_to = 'gene_list') %>%
filter(!is.na(gene_list)) %>%
rowwise(Orthogroup, species) %>%
reframe(gene_id = str_split(gene_list, ', ') %>%
unlist) %>%
filter(!is.na(gene_id))
#### Identify each Orthogroup ####
gene_kegg_vote <- function(data, group_vars){
#For each geneID from up to top 10 protein hits with KEGG orthology
# pick modal kegg orthology term
# If there is a tie then: pick minimum evalue
# if still a tie then: pick max bitscore
# if still a tie (e.g. 'Acer_00000041-RA') pick at random
group_by(data, across(all_of(c(group_vars, 'kegg_orthology')))) %>%
mutate(n = n()) %>%
ungroup %>%
group_by(across(all_of(group_vars))) %>%
mutate(prop_top_hits = n / n()) %>%
filter(n == max(n)) %>%
filter(evalue == min(evalue)) %>%
filter(bitscore == max(bitscore)) %>%
sample_n(1) %>%
ungroup %>%
select(-n)
}
ortho_kegg_vote <- all_orthogroups %>%
left_join(kegg_annotations,
by = c('species', 'gene_id' = 'qseqid')) %>%
filter(!is.na(kegg_orthology)) %>%
gene_kegg_vote('Orthogroup') %>%
select(-species:-uniprot_id)
ortho_kegg_vote %>%
ggplot(aes(x = prop_top_hits)) +
geom_histogram(bins = 30) +
scale_x_continuous(labels = scales::percent_format()) +
labs(x = 'Blast hit KO Agreement - must have a KO to include (%)')
#### Get Kegg Pathway data ####
kegg_pathways <- ortho_kegg_vote %>%
select(kegg_orthology, kegg_pathway) %>%
filter(!is.na(kegg_pathway)) %>%
distinct %>%
rowwise(kegg_orthology) %>%
reframe(kegg_path = str_split(kegg_pathway, ';;') %>% unlist) %>%
distinct %>%
nest(data = c(kegg_orthology)) %>%
mutate(grouping = row_number() %/% 10) %>%
group_by(grouping) %>%
reframe(kegg_paths = str_c(kegg_path, collapse = ';;'),
data = list(data)) %>%
rowwise %>%
mutate(kegg_pathways = list(possibly(get_kegg_path, otherwise = list(NULL), quiet = FALSE)(kegg_paths))) %>%
ungroup %>%
select(data, kegg_pathways) %>%
unnest(c(data, kegg_pathways)) %>%
unnest(data) %>%
distinct %>%
filter(!str_detect(major_category, 'Human')) %>%
mutate(name = str_c(name, ' (', entry, ')')) %>%
select(-entry) %>%
rename(path = name,
major = major_category,
minor = minor_category) %>%
group_by(kegg_orthology, minor, major) %>%
summarise(all_paths = str_c(path, collapse = '; '),
.groups = 'drop') %>%
mutate(minor = str_c(major, minor, sep = ' - '), .keep = 'unused') %>%
arrange(minor) %>%
pivot_wider(names_from = minor,
values_from = all_paths,
names_vary = 'slowest')
all_orthogroups
ortho_kegg_vote
kegg_pathways
kegg_pathways
ortho_kegg_vote
all_orthogroups
ortho_kegg_vote
left_join(ortho_kegg_vote,
kegg_pathways,
by = 'kegg_orthology')
left_join(ortho_kegg_vote,
kegg_pathways,
by = 'kegg_orthology')
ortho_kegg_vote
kegg_pathways
full_join(ortho_kegg_vote,
kegg_pathways,
by = 'kegg_orthology')
full_join(ortho_kegg_vote,
kegg_pathways,
by = 'kegg_orthology')
full_join(ortho_kegg_vote,
kegg_pathways,
by = 'kegg_orthology') %>%
select(-kegg_pathway, -kegg_brite, -kegg_module)
full_join(ortho_kegg_vote,
kegg_pathways,
by = 'kegg_orthology') %>%
select(-kegg_pathway, -kegg_brite, -kegg_module) %>%
arrange(str_extract(Orthogroup, '[0-9]+') %>% as.integer)
ortho_kegg_vote
kegg_pathways
species_kegg
all_orthogroups
select(all_orthogroups, Orthogroup) %>%
distinct
select(all_orthogroups, Orthogroup) %>%
distinct %>%
full_join(ortho_kegg_vote,
by = 'Orthogroup')
select(all_orthogroups, Orthogroup) %>%
distinct %>%
full_join(ortho_kegg_vote,
by = 'Orthogroup') %>%
full_join(kegg_pathways,
by = 'kegg_orthology') %>%
select(-kegg_pathway, -kegg_brite, -kegg_module) %>%
arrange(str_extract(Orthogroup, '[0-9]+') %>% as.integer)
select(all_orthogroups, Orthogroup) %>%
distinct
select(all_orthogroups, Orthogroup) %>%
distinct %>%
full_join(ortho_kegg_vote,
by = 'Orthogroup') %>%
full_join(kegg_pathways,
by = 'kegg_orthology') %>%
select(-kegg_pathway, -kegg_brite, -kegg_module) %>%
arrange(str_extract(Orthogroup, '[0-9]+') %>% as.integer) %>%
write_csv('../intermediate_files/kegg_gene_pathways.csv.gz')
